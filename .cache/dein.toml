[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
augroup SetColorScheme
    au!
    au VimEnter * nested colorscheme molokai
augroup END
    '''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'filename', 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'gitbranch': 'gina#component#repo#branch',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ },
        \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
        \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
        \ }

let g:lightline.tab = {
      \ 'active': [ 'tabnum', 'filename', 'modified' ],
      \ 'inactive': [ 'tabnum', 'filename', 'modified' ]
      \ }

let g:lightline.tab_component_function = {
      \ 'filename': 'LightlineTabFilename',
      \ 'modified': 'lightline#tab#modified',
      \ 'readonly': 'lightline#tab#readonly',
      \ 'tabnum': 'lightline#tab#tabnum' }

function! LightlineModified()
  let fname = expand('%:t')
  return fname =~ '^NERD_tree' ? '' :
       \ &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  let fname = expand('%:t')
  return fname =~ '^NERD_tree' ? '' :
       \ &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  let fname = expand('%:t')
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \  fname =~ '^NERD_tree' ? '' :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightlineTabFilename(n) abort
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  let _ = pathshorten(expand('#'.buflist[winnr - 1].':f'))
  return _ !=# '' ? _ : '[No Name]'
endfunction
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
on_source = ['nerdtree']
repo = 'jistr/vim-nerdtree-tabs'

[[plugins]]
repo = 'lokaltog/vim-easymotion'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'hisaknown/nanomap.vim'

[[plugins]]
repo = 'reireias/vim-cheatsheet'

[[plugins]]
repo = "airblade/vim-gitgutter"

# 遅いから無効
#[[plugins]]
#repo = "tpope/vim-fugitive"

#[[plugins]]
#repo = "lambdalisue/gina.vim"

[[plugins]]
repo = "w0rp/ale"
hook_add = '''
    let g:ale_statusline_format = ['E%d', 'W%d', 'ok']
'''

#[[plugins]]
#repo = 'zebult/auto-gtags.vim'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_add = '''
    " Options
    let g:Gtags_Auto_Map = 0
    let g:Gtags_OpenQuickfixWindow = 1
    " Keymap
    noremap <C-h> :Gtags -f %<CR>
    noremap <C-j> :GtagsCursor<CR>
    nnoremap <C-d> :<C-u>exe('Gtags '.expand('<cword>'))<CR>
    nnoremap <C-k> :<C-u>exe('Gtags -r '.expand('<cword>'))<CR>
'''

#[[plugins]]
#repo = 'jsfaint/gen_tags.vim'
#hook_add = '''
#    let g:gen_tags#gtags_auto_gen = 1
#'''

#[[plugins]]
#repo = 'vim-scripts/taglist.vim'
#hook_add = '''
#    let g:Tlist_Auto_Open = 1
#    let g:Tlist_Auto_Update = 1
#    let g:Tlist_Close_On_Select = 1
#    let g:Tlist_Exit_OnlyWindow = 1
#    let g:Tlist_File_Fold_Auto_Close = 1
#    let g:Tlist_Use_Right_Window = 1
#    let g:Tlist_Show_One_File = 1
#'''

#[[plugins]]
#repo = "kamykn/CCSpellCheck.vim"

[[plugins]]
repo = "kshenoy/vim-signature"
